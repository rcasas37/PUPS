//-----CUSTOM NAME FOR SERIAL PORT, SERIAL IS "BACKCHANNEL UART" AND SERIAL1 IS "REGULAR UART"-----//
//#define XBeeSerial Serial1

#define LED RED_LED

//-----INITIALIZE LARGE CHAR ARRAYS FOR MESSAGE RECEIVING-----//
char PacketRxCC[75];
char PacketRxROV[75];

//-----EXAMPLE CONTROL PACKET FOR TEST/DEBUG-----//
//char test[] = "C,LTx1200,LTy1000,RTx0,RTy-800,AVa10,Xva10;";

//-----PACKET IDS-----//
char SensorID = 'S';
char ControlID = 'C';
char GPSID = 'L';
char PauseID = 'p';
char Order66ID = 'f';
char ShutdownID = 'b';
char InitID = 'z';

//-----SETUP FOR PINS AND SERIAL COMMUNICATION-----//
void setup() {
  
  //-----WAIT FOR HARDWARE SERIAL TO APPEAR-----//
  while (!Serial);
//  While (!Serial1);

  //-----INITIALIZE DIGITAL PIN AS OUTPUT-----//
  pinMode(LED, OUTPUT);

  //-----BEGIN BACKCHANNEL UART AT 9600 BAUD RATE-----//
  Serial.begin(9600);
  
  //-----BEGIN REGULAR UART AT 9600 BAUD RATE-----//
  Serial1.begin(9600);

  //-----DELAY TO ALLOW UART COMMS TO BEGIN
  delay(200);

  //-----CLEAR TX AND RX BUFFERS-----//

  //-----CLEAR REGULAR UART TX BUFFER-----//
  Serial1.flush();
  //-----CLEAR REGULAR UART RX BUFFER-----//
  Serial1.read();
  //-----CLEAR BACKCHANNEL UART TX BUFFER-----//
  Serial.flush();
  //-----CLEAR BACKCHANNEL UART RX BUFFER-----//
  Serial.read();
}


//-----MAIN LOOP OF BUOY PROGRAM-----//
void loop() {
  
  //-----BLINK LED FOR DEBUG/TEST HEARTBEAT-----//
  digitalWrite(LED, HIGH);
  delay(100);
  digitalWrite(LED, LOW);
  delay(100);

  //-----REGULAR UART-----//
  if (Serial1.available()) {

    //-----INITIALIZE CHAR X VARIABLE TO CHECK
    char x = '0';
    //-----INITIALIZE COUNT FOR ARRAY SIZE/PLACEMENT-----//
    int count = 0;
    
    //-----RECEIVE EACH CHAR AND ADD TO ARRAY, STOP WHEN CHAR EQUALS STOPPING BYTE OR SEMICOLON-----//    
    for(count; x != ';';count++) {
      x = Serial1.read();
      PacketRxCC[count] = x;
      //Serial.write(x);
    }

    //-----PRINT SIZE OF MESSAGE (OR COUNT) FOR DEBUG/TEST-----//
    //Serial.print("\n\nSize of Message: \n");
    //Serial.println(count);

    //-----INITIALIZE AN ARRAY WITH ACCURATE SIZE OF MESSAGE-----//
    char PacketTxCC[count];

    //-----TRANSFER EACH CHAR FROM RECEIVED ARRAY TO ACCURATE SIZE ARRAY-----//
    for(int i = 0; i < count; i++) {
      PacketTxCC[i] = PacketRxCC[i];
      Serial.write(PacketTxCC[i]);
    }

    //Serial.print("\nTx Message\n");
    //Serial.write(PacketTxCC);
    
    //-----CHECK ID VALUE(FIRST BYTE OF ARRAY)-----//
    //Serial.print("ID: \n");
    char n = PacketTxCC[0];
    //Serial.println(PacketTxCC[0]); 

    //-----SWITCH STATEMENT TO DECIDE BASED ON ID OF RECEIVED MESSAGE-----//
    //-----ID: CONTROL PACKET-----//
    if (n == ControlID){
      //-----FOR DEBUG/TEST-----//
      //Serial.print("Correct Size Message to Send: \n");
      //Serial.write("\nControl\n");

      Serial.print("\nTx Message\n");
      Serial.write(PacketTxCC);
      
      //-----ITERATE THROUGH THE ARRAY AND SEND EACH CHAR-----//
      //for(int i=0; i<count; i++) {
        //Serial1.write(PacketTxCC[i]);
        //-----PRINT TO CONSOLE FOR DEBUG/TEST-----//
        //Serial.write(PacketTxCC[i]);
      //}
      
    }
    //-----ID: PAUSE-----//
    else if (n == PauseID){
      //-----FOR DEBUG/TEST-----//
      //Serial.print("Correct Size Message to Send: \n");
      //Serial.write("\nPause\n");

      Serial.print("\nTx Message\n");
      Serial.write(PacketTxCC);
      
      //-----ITERATE THROUGH THE ARRAY AND SEND EACH CHAR-----//
      //for(int i=0; i<count; i++) {
        //Serial1.write(PacketTxCC[i]);
        //-----PRINT TO CONSOLE FOR DEBUG/TEST-----//
        //Serial.write(PacketTxCC[i]);
      //}
     
    }
    //-----ID: SENSOR INITIALIZATION PACKET-----//
    else if (n == InitID){
      
      //-----FOR DEBUG/TEST-----//
      //Serial.print("Correct Size Message to Send: \n");
      //Serial.write("\nInitialize\n");    

      Serial.print("\nTx Message\n");
      Serial.write(PacketTxCC);
      
      //-----ITERATE THROUGH THE ARRAY AND SEND EACH CHAR-----//
      //for(int i=0; i<count; i++) {
        //Serial1.write(PacketTxCC[i]);
        //-----PRINT TO CONSOLE FOR DEBUG/TEST-----//
        //Serial.write(PacketTxCC[i]);
      //}

    }
      //-----ID: ORDER 66-----//
    else if (n == Order66ID){
      //-----FOR DEBUG/TEST-----//
      //Serial.print("Correct Size Message to Send: \n");
      //Serial.write("\nEND\n");    

      Serial.print("\nTx Message\n");
      Serial.write(PacketTxCC);
      
      //-----ITERATE THROUGH THE ARRAY AND SEND EACH CHAR-----//
      //for(int i=0; i<count; i++) {
        //Serial1.write(PacketTxCC[i]);
        //-----PRINT TO CONSOLE FOR DEBUG/TEST-----//
        //Serial.write(PacketTxCC[i]);
      //}

    }
    //-----ID: BUOY SHUTDOWN-----//
    else if (n == ShutdownID){
      //-----HOW TO SHUTDOWN BUOY?-----//
      Serial.write("\nBuoy Shutdown\n");
    } 
    //-----ID: DEFAULT OR "OTHER"-----//
    //else {
        //Serial.write("\nPacket/ID Corrupted\n");
    //}

    //-----CLEAR TX AND RX BUFFERS-----//

    //-----CLEAR REGULAR UART TX BUFFER-----//
//    Serial1.flush();
//    //-----CLEAR REGULAR UART RX BUFFER-----//
//    Serial1.read();
//    //-----CLEAR BACKCHANNEL UART TX BUFFER-----//
//    Serial.flush();
//    //-----CLEAR BACKCHANNEL UART RX BUFFER-----//
//    Serial.read();

  }

  //-----BACKCHANNEL UART-----//
  
  if (Serial.available()) {
      
    //-----INITIALIZE CHAR A VARIABLE TO CHECK
    char a;
    //-----INITIALIZE COUNT FOR ARRAY SIZE/PLACEMENT-----//
    int count = 0;
    
    //-----RECEIVE EACH CHAR AND ADD TO ARRAY, STOP WHEN CHAR EQUALS STOPPING BYTE OR SEMICOLON-----//    
    for(count; a != ';';count++) {
      a = Serial.read();
      PacketRxROV[count] = a;
    }

    //-----PRINT SIZE OF MESSAGE (OR COUNT) FOR DEBUG-----//
    //Serial.print("\nSize of Message: \n");
    //Serial.println(count);

    //-----INITIALIZE AN ARRAY WITH ACCURATE SIZE OF MESSAGE-----//
    char PacketTxROV[count];

    //-----TRANSFER EACH CHAR FROM RECEIVED ARRAY TO ACCURATE SIZE ARRAY-----//
    for(int i = 0; i < count; i++) {
      PacketTxROV[i] = PacketRxROV[i];
    }

    //-----CHECK ID VALUE(FIRST BYTE OF ARRAY)-----//
    //Serial.print("ID: \n");
    char n = PacketTxROV[0];
    //Serial.println(PacketTxROV[0]); 

    //-----SWITCH STATEMENT TO DECIDE BASED ON ID OF RECEIVED MESSAGE-----//
    //-----ID: SENSOR PACKET-----//   
    if (n == SensorID){
      //-----FOR DEBUG/TEST-----//
      //Serial.print("Correct Size Message to Send: \n");
      //Serial.write("\nSensor\n");

      //Serial.print("\nTx Message\n");
      //Serial.write(PacketTxROV);
      
      //-----ITERATE THROUGH THE ARRAY AND SEND EACH CHAR-----//
      for(int i=0; i<count; i++) {
        //Serial.write(PacketTxROV[i]);
        //-----PRINT TO CONSOLE FOR DEBUG/TEST-----//
        Serial1.write(PacketTxROV[i]);
      }
    } //else{
      //Serial1.write("\nPacket/ID Corrupted\n");
    //}
    
    //-----CLEAR TX AND RX BUFFERS-----//

    //-----CLEAR REGULAR UART TX BUFFER-----//
    Serial1.flush();
    //-----CLEAR REGULAR UART RX BUFFER-----//
    Serial1.read();
    //-----CLEAR BACKCHANNEL UART TX BUFFER-----//
    Serial.flush();
    //-----CLEAR BACKCHANNEL UART RX BUFFER-----//
    Serial.read();

  }
}
