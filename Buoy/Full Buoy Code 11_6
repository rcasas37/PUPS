//-----INCLUDE LIBRARY FOR I2C-----//
#include <Wire.h>

//-----DEFINE PIN 4.7 AS OUTPUT FOR LED-----//
#define LED P4_7

//-----INITIALIZE LARGE CHAR ARRAYS FOR MESSAGE RECEIVING-----//
char PacketRxCC[75];
char PacketRxROV[75];

//-----PACKET IDS-----//
char SensorID = 'S';
char ControlID = 'C';
char GPSID = 'L';
char PauseID = 'p';
char Order66ID = 'f';
char ShutdownID = 'b';
char InitID = 'z';

//-----INITIALIZE COUNT-----//
int count = 0;
int gpscount = 0;

//-----SETUP FOR PINS AND SERIAL COMMUNICATION-----//
void setup() {
  
  //-----WAIT FOR HARDWARE SERIAL TO APPEAR-----//
  while (!Serial);
  while (!Serial1);

  //-----BEGIN I2C-----//
  Wire.begin();

  //-----INITIALIZE DIGITAL PIN AS OUTPUT-----//
  pinMode(LED, OUTPUT);

  //-----BEGIN UART(S) TO 9600 BAUD RATE-----//
  Serial.begin(9600);
  Serial1.begin(9600);

  //-----DELAY TO ALLOW UART COMMS TO BEGIN
  delay(100);

  //-----INITIALIZE RESET PIN-----//
  pinMode(P2_4, OUTPUT);
  digitalWrite(P2_4, LOW);
  
  //-----INITIALIZE INTERRUPT PIN-----//
  pinMode(P1_6, INPUT);
  
  //-----INITIALIZE WAKE PIN-----//
  pinMode(P2_5, OUTPUT);
  digitalWrite(P2_5, HIGH);

  //-----CLEAR TX BUFFERS-----//
  Serial1.flush();
  Serial.flush();

  Serial.println("SETUP DONE");
}


//-----MAIN LOOP OF BUOY PROGRAM-----//
void loop(){
  
  //-----BLINK LED FOR DEBUG/TEST HEARTBEAT-----//
  digitalWrite(LED, HIGH);
  delay(10);
  digitalWrite(LED, LOW);
  delay(10);

  //-----INITAIALIZE ARRAYS TO 0'S-----//
  for(int i = 0; i < 75; i++){
    PacketRxROV[i] = '0';
    PacketRxCC[i] = '0';
  }

  //-----INITIALIZE CHAR X AND Y VARIABLES TO CHECK-----//
  char x = '0';
  char y = '0';

  //----------XBEE/REGULAR UART SECTION----------//

  count = 0;    //-----RESET COUNT-----//
  if(Serial1.available()){    //-----IF DATA FROM XBEE IS AVAILABLE CONTINUE, OTHERWISE GO CHECK TETHER-----//

    while(x != ';'){    //-----ITERATE THROUGH INCOMING PACKAGE WHILE X IS NOT EQUAL TO SEMICOLON-----//
      if (Serial1.available()) {    //-----IF DATA FROM XBEE IS AVAILABLE CONTINUE, OTHERWISE WAIT-----//
        x = Serial1.read();    //-----READ BYTE AND SET CHAR EQUAL TO X-----//
        PacketRxCC[count] = x;    //-----SET CHAR X EQUAL TO SPOT IN ARRAY BASED ON COUNT, STARTING AT ZERO-----//
        if(PacketRxCC[0] == ControlID || PacketRxCC[0] == PauseID || PacketRxCC[0] == InitID || PacketRxCC[0] == Order66ID){    //-----IF FIRST BYTE OF ARRAY IS EQUAL TO A RECOGNIZED ID FROM COMMAND CENTER, SEND BYTE THROUGH THE TETHER-----//
          Serial.write(PacketRxCC[count]);
        }
        if(PacketRxCC[0] == ShutdownID){    //-----IF FIRST BYTE OF ARRAY IS EQUAL TO THE SHUTDOWN ID FROM COMMAND CENTER, SEND BUOY SHUTDOWN (THIS WILL LIKELY CHANGE TO BREAK OUT OF MAIN LOOP, ESSENTIALLY TERMINATING PROGRAM)-----//
          Serial.write("Buoy Shutdown");
        }
        count++;    //-----ONCE THE ABOVE IS COMPLETE, INCREASE COUNT AND CONTINUE-----//
      }
    }
  }
  
  //----------TETHER/BACKCHANNEL UART SECTION----------//  
  
  count = 0;    //-----RESET COUNT-----//  
  if(Serial.available()){    //-----IF DATA FROM TETHER IS AVAILABLE CONTINUE, OTHERWISE GO CHECK GPS-----//
    while(y != ';'){    //-----ITERATE THROUGH INCOMING PACKAGE WHILE Y IS NOT EQUAL TO SEMICOLON-----//
      if (Serial.available()){    //-----IF DATA FROM TETHER IS AVAILABLE CONTINUE, OTHERWISE WAIT-----//
        y = Serial.read();    //-----READ BYTE AND SET CHAR EQUAL TO Y-----//
        PacketRxROV[count] = y;    //-----SET CHAR Y EQUAL TO SPOT IN ARRAY BASED ON COUNT, STARTING AT ZERO-----//
        if(PacketRxROV[0] == SensorID){    //-----IF FIRST BYTE OF ARRAY IS EQUAL TO THE SENSOR DATA ID FROM ROV, SEND BYTE THROUGH THE XBEE-----//
          Serial1.write(PacketRxROV[count]);
        }
        count++;    //-----ONCE THE ABOVE IS COMPLETE, INCREASE COUNT AND CONTINUE-----//
      }
    }
  }
  
  //----------GPS/I2C SECTION----------//
  
  if(gpscount >= 5){    //-----CHECK IF GPSCOUNT IS GREATER THAN OR EQUAL TO 5, OTHERWISE CONTINUE (SO WE ARE NOT SENDING GPS DATA EVERY ITERATION)-----//
  
    count = 0;    //-----RESET COUNT-----//
    gpscount = 0;    //-----RESET GPSCOUNT-----//
    digitalWrite(P2_4, HIGH);    //-----ALLOW THE GPS SENSOR TO START RUNNING-----//
    Wire.requestFrom(16, 8);    //-----REQUEST 8 BYTES FROM SLAVE DEVICE #16 (GPS)-----//
   
    char GPSArray[75];    //-----INITIALIZE GPS ARRAY-----//
    
    for(int i = 0; i<75; i++)    //-----SET GPS ARRAY VALUES TO "_"-----//                            
    {  
      GPSArray[i] = '_';
    }
    char c = Wire.read();    //-----SET READ BYTE TO CHAR C-----//
    delay(2);
    
    //-----PARSE THROUGH GPS DATA AND ISOLATE NECESSARY LOCATION DATA-----//
    if(c == '$')    //-----IF C IS EQUAL TO $ SIGN, CONTINUE-----//
    {
      c = Wire.read();
      delay(2);
      //Serial.print(c);
      if(c == 'G')    //-----IF NEXT C IS EQUAL TO G, CONTINUE-----//
      {
        c = Wire.read();
        delay(2);
        //Serial.print(c);
        if(c == 'N')    //-----IF NEXT C IS EQUAL TO N, CONTINUE-----//
        {
          c = Wire.read();
          delay(2);
          //Serial.print(c);
          if(c == 'G')    //-----IF NEXT C IS EQUAL TO G, CONTINUE-----//
          {
            c = Wire.read();
            delay(2);
            //Serial.print(c);
            if(c == 'G')    //-----IF NEXT C IS EQUAL TO G, CONTINUE-----//
            {
              c = Wire.read();
              delay(2);
              //Serial.print(c);
              if(c == 'A')    //-----IF NEXT C IS EQUAL TO A, CONTINUE-----//
              {
                c = Wire.read();    //-----USE NEXT C TO BUILD ARRAY-----//
                delay(2);
                GPSArray[0] = 'L';    //-----SET FIRST CHAR OF ARRAY TO L FOR GPS DATA PACKET ID-----//
                
                //-----FILL ARRAY WITH GPS DATA (TIME, LATITUDE, LONGITUDE) SEPARATED BY COMMAS UNTIL "*" IS REACHED-----//
                for(int i = 1; c != '*'; i++)
                {
                  GPSArray[i] = c;    //-----SET CHAR C EQUAL TO SPOT IN GPSARRAY BASED ON I, STARTING AT ONE-----//
                  //Serial.print(c);
                  c = Wire.read();
                  Wire.requestFrom(16, 1);
                  delay(2);
  
                  count = i;
                }
                GPSArray[count+1] = ';';    //-----APPEND TERMINATING CHAR (SEMICOLON) TO ARRAY-----//
                //Serial.println("\n"); 
              }
            }
          }
        }
      }
    }
    //-----SEND EACH BYTE OF ARRAY THROUGH TETHER 
    for(int i = 0; i<count; i++)                              
    {  
      if(GPSArray[i] != '_')
      {
          Serial1.print(GPSArray[i]);
      }
    }
  }
  gpscount++;    //-----ONCE THE ABOVE IS COMPLETED, INCREASE COUNT AND CONTINUE-----//
}
